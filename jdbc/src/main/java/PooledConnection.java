import java.sql.*;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;
import java.util.function.Supplier;

//1. "^\s{4}([^ @v]([<\w, \?>])* ([^(]+)\(([^)]*)\)( throws [\w,]+)?);"
//1. "    default $1 {\n        return get().$3($4);\n    }"
public interface PooledConnection extends Connection, Supplier<Connection> {

    

    @Override
    default Statement createStatement() throws SQLException {
        return get().createStatement();
    }

    @Override
    default PreparedStatement prepareStatement(String sql) throws SQLException {
        return get().prepareStatement(String sql);
    }

    @Override
    default CallableStatement prepareCall(String sql) throws SQLException {
        return get().prepareCall(String sql);
    }

    @Override
    default String nativeSQL(String sql) throws SQLException {
        return get().nativeSQL(String sql);
    }

    @Override
    void setAutoCommit(boolean autoCommit) throws SQLException;

    @Override
    default boolean getAutoCommit() throws SQLException {
        return get().getAutoCommit();
    }

    @Override
    void commit() throws SQLException;

    @Override
    void rollback() throws SQLException;

    @Override
    default boolean isClosed() throws SQLException {
        return get().isClosed();
    }

    @Override
    default DatabaseMetaData getMetaData() throws SQLException {
        return get().getMetaData();
    }

    @Override
    void setReadOnly(boolean readOnly) throws SQLException;

    @Override
    default boolean isReadOnly() throws SQLException {
        return get().isReadOnly();
    }

    @Override
    void setCatalog(String catalog) throws SQLException;

    @Override
    default String getCatalog() throws SQLException {
        return get().getCatalog();
    }

    @Override
    void setTransactionIsolation(int level) throws SQLException;

    @Override
    default int getTransactionIsolation() throws SQLException {
        return get().getTransactionIsolation();
    }

    @Override
    default SQLWarning getWarnings() throws SQLException {
        return get().getWarnings();
    }

    @Override
    void clearWarnings() throws SQLException;

    @Override
    default Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return get().createStatement(int resultSetType, int resultSetConcurrency);
    }

    @Override
    default PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return get().prepareStatement(String sql, int resultSetType, int resultSetConcurrency);
    }

    @Override
    default CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return get().prepareCall(String sql, int resultSetType, int resultSetConcurrency);
    }

    @Override
    default Map<String, Class<?>> getTypeMap() throws SQLException {
        return get().getTypeMap();
    }

    @Override
    void setTypeMap(Map<String, Class<?>> map) throws SQLException;

    @Override
    void setHoldability(int holdability) throws SQLException;

    @Override
    default int getHoldability() throws SQLException {
        return get().getHoldability();
    }

    @Override
    default Savepoint setSavepoint() throws SQLException {
        return get().setSavepoint();
    }

    @Override
    default Savepoint setSavepoint(String name) throws SQLException {
        return get().setSavepoint(String name);
    }

    @Override
    void rollback(Savepoint savepoint) throws SQLException;

    @Override
    void releaseSavepoint(Savepoint savepoint) throws SQLException;

    @Override
    default Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return get().createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability);
    }

    @Override
    default PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return get().prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability);
    }

    @Override
    default CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return get().prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability);
    }

    @Override
    default PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return get().prepareStatement(String sql, int autoGeneratedKeys);
    }

    @Override
    default PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return get().prepareStatement(String sql, int[] columnIndexes);
    }

    @Override
    default PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return get().prepareStatement(String sql, String[] columnNames);
    }

    @Override
    default Clob createClob() throws SQLException {
        return get().createClob();
    }

    @Override
    default Blob createBlob() throws SQLException {
        return get().createBlob();
    }

    @Override
    default NClob createNClob() throws SQLException {
        return get().createNClob();
    }

    @Override
    default SQLXML createSQLXML() throws SQLException {
        return get().createSQLXML();
    }

    @Override
    default boolean isValid(int timeout) throws SQLException {
        return get().isValid(int timeout);
    }

    @Override
    void setClientInfo(String name, String value) throws SQLClientInfoException;

    @Override
    void setClientInfo(Properties properties) throws SQLClientInfoException;

    @Override
    default String getClientInfo(String name) throws SQLException {
        return get().getClientInfo(String name);
    }

    @Override
    default Properties getClientInfo() throws SQLException {
        return get().getClientInfo();
    }

    @Override
    default Array createArrayOf(String typeName, Object[] elements) throws SQLException {
        return get().createArrayOf(String typeName, Object[] elements);
    }

    @Override
    default Struct createStruct(String typeName, Object[] attributes) throws SQLException {
        return get().createStruct(String typeName, Object[] attributes);
    }

    @Override
    void setSchema(String schema) throws SQLException;

    @Override
    default String getSchema() throws SQLException {
        return get().getSchema();
    }

    @Override
    void abort(Executor executor) throws SQLException;

    @Override
    void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException;

    @Override
    default int getNetworkTimeout() throws SQLException {
        return get().getNetworkTimeout();
    }

    @Override
    default <T> T unwrap(Class<T> iface) throws SQLException {
        return get().unwrap(Class<T> iface);
    }

    @Override
    default boolean isWrapperFor(Class<?> iface) throws SQLException {
        return get().isWrapperFor(Class<?> iface);
    }
}